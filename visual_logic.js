/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.8.0
 * Fri, 07 Mar 2025 16:23:08 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();
_pGlob.materialsCache = new Map();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    return {
        getObjectByName, retrieveObjectNames, bindListener, getElements,
        getObjectName, initObjectPicking, isObjectAmongObjects,
    };
};

var PL = {};



// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var selected, hidden;

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

function listsRepeat(value, n) {
  var array = [];
  for (var i = 0; i < n; i++) {
    array[i] = value;
  }
  return array;
}

// isObjectVisible puzzle
function isObjectVisible(objSelector) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        if (obj.visible)
            return true;
    }
    return false;
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// whenHovered puzzle
PzLib.initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);

            if (PzLib.isObjectAmongObjects(objName, PzLib.retrieveObjectNames(el.objSelector)) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(prevHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(currHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}


changeVis(['GROUP', 'Crossection'], false);
changeVis('Cube', false);
selected = listsRepeat(false, 26);
hidden = listsRepeat(false, 26);

['GROUP', 'Crossection'];

eventHTMLElem('click', 'cross', true, function(event) {
  if (isObjectVisible(['GROUP', 'Whole'])) {
    changeVis(['GROUP', 'Whole'], false);
    changeVis(['GROUP', 'Crossection'], true);
  }
});

eventHTMLElem('click', 'whole', true, function(event) {
  if (isObjectVisible(['GROUP', 'Crossection'])) {
    changeVis(['GROUP', 'Crossection'], false);
    changeVis(['GROUP', 'Whole'], true);
  }
});

registerOnHover(['GROUP', 'Whole'], false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
});

registerOnHover(['GROUP', 'Crossection'], false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
});

/* HIGHLIGHTING */
/* Extrinsic Eye Muscles */
eventHTMLElem('click', ['QUERYSELECTOR', '#superior-rectus > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[0] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis(['GROUP', 'Crossection'], false);
      changeVis(['GROUP', 'Whole'], true);
    }
    if (!isObjectVisible('Superior Rectus')) {
      changeVis('Superior Rectus', true);
    }
    outline('Superior Rectus', 'ENABLE');
    hidden[0] = false;
    selected[0] = true;
  } else {
    selected[0] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#inferior-rectus > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[1] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis(['GROUP', 'Crossection'], false);
      changeVis(['GROUP', 'Whole'], true);
    }
    if (!isObjectVisible('Inferior Rectus')) {
      changeVis('Inferior Rectus', true);
    }
    outline('Inferior Rectus', 'ENABLE');
    hidden[1] = false;
    selected[1] = true;
  } else {
    selected[1] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#medial-rectus > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[2] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis(['GROUP', 'Crossection'], false);
      changeVis(['GROUP', 'Whole'], true);
    }
    if (!isObjectVisible('Medial Rectus')) {
      changeVis('Medial Rectus', true);
    }
    outline('Medial Rectus', 'ENABLE');
    hidden[2] = false;
    selected[2] = true;
  } else {
    selected[2] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#lateral-rectus > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[3] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis(['GROUP', 'Crossection'], false);
      changeVis(['GROUP', 'Whole'], true);
    }
    if (!isObjectVisible('Lateral Rectus')) {
      changeVis('Lateral Rectus', true);
    }
    outline('Lateral Rectus', 'ENABLE');
    hidden[3] = false;
    selected[3] = true;
  } else {
    selected[3] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#superior-oblique > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[4] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis(['GROUP', 'Crossection'], false);
      changeVis(['GROUP', 'Whole'], true);
    }
    if (!isObjectVisible('Superior Oblique')) {
      changeVis('Superior Oblique', true);
    }
    outline('Superior Oblique', 'ENABLE');
    hidden[4] = false;
    selected[4] = true;
  } else {
    selected[4] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#inferior-oblique > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[5] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis(['GROUP', 'Crossection'], false);
      changeVis(['GROUP', 'Whole'], true);
    }
    if (!isObjectVisible('Inferior Oblique')) {
      changeVis('Inferior Oblique', true);
    }
    outline('Inferior Oblique', 'ENABLE');
    hidden[5] = false;
    selected[5] = true;
  } else {
    selected[5] = false;
  }
});
/* Eye Chambers */
eventHTMLElem('click', ['QUERYSELECTOR', '#anterior-chamber > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[6] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Anterior Chamber')) {
      changeVis('Anterior Chamber', true);
    }
    outline('Anterior Chamber', 'ENABLE');
    hidden[6] = false;
    selected[6] = true;
  } else {
    selected[6] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#posterior-chamber > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[7] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Posterior Chamber')) {
      changeVis('Posterior Chamber', true);
    }
    outline('Posterior Chamber', 'ENABLE');
    hidden[7] = false;
    selected[7] = true;
  } else {
    selected[7] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#aqueous-humor > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[8] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Aqueous Humor')) {
      changeVis('Aqueous Humor', true);
    }
    outline('Aqueous Humor', 'ENABLE');
    hidden[8] = false;
    selected[8] = true;
  } else {
    selected[8] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#vitreous-chamber > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[9] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Vitreous Chamber')) {
      changeVis('Vitreous Chamber', true);
    }
    outline('Vitreous Chamber', 'ENABLE');
    hidden[9] = false;
    selected[9] = true;
  } else {
    selected[9] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#vitreous-humor > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[10] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Vitreous Humor')) {
      changeVis('Vitreous Humor', true);
    }
    outline('Vitreous Humor', 'ENABLE');
    hidden[10] = false;
    selected[10] = true;
  } else {
    selected[10] = false;
  }
});
/* Fibrous Tunic */
eventHTMLElem('click', ['QUERYSELECTOR', '#sclera > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[11] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      if (!isObjectVisible('Sclera')) {
        changeVis('Sclera', true);
      }
      outline('Sclera', 'ENABLE');
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      if (!isObjectVisible('Sclera.001')) {
        changeVis('Sclera.001', true);
      }
      outline('Sclera.001', 'ENABLE');
    }
    hidden[11] = false;
    selected[11] = true;
  } else {
    selected[11] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#cornea > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[12] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      if (!isObjectVisible('Cornea')) {
        changeVis('Cornea', true);
      }
      outline('Cornea', 'ENABLE');
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      if (!isObjectVisible('Cornea.001')) {
        changeVis('Cornea.001', true);
      }
      outline('Cornea.001', 'ENABLE');
    }
    hidden[12] = false;
    selected[12] = true;
  } else {
    selected[12] = false;
  }
});
/* Vascular Tunic */
eventHTMLElem('click', ['QUERYSELECTOR', '#choroid > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[13] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Choroid')) {
      changeVis('Choroid', true);
    }
    outline('Choroid', 'ENABLE');
    hidden[13] = false;
    selected[13] = true;
  } else {
    selected[13] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#ciliary-body > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[14] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Ciliary Body')) {
      changeVis('Ciliary Body', true);
      changeVis('Ciliary Muscles', true);
      changeVis('Suspensory Ligaments', true);
    }
    outline('Ciliary Body', 'ENABLE');
    outline('Ciliary Muscles', 'ENABLE');
    outline('Suspensory Ligaments', 'ENABLE');
    hidden[14] = false;
    hidden[15] = false;
    hidden[16] = false;
    selected[14] = true;
    selected[15] = true;
    selected[16] = true;
  } else {
    selected[14] = false;
    selected[15] = false;
    selected[16] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#ciliary-muscles > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[14] == true) {
    outline('Ciliary Body', 'ENABLE');
  }
  if (selected[16] == true) {
    outline('Suspensory Ligaments', 'ENABLE');
  }
  if (selected[15] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Ciliary Muscles')) {
      changeVis('Ciliary Muscles', true);
    }
    outline('Ciliary Muscles', 'ENABLE');
    hidden[15] = false;
    selected[15] = true;
  } else {
    selected[15] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#suspensory-ligaments > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[14] == true) {
    outline('Ciliary Body', 'ENABLE');
  }
  if (selected[15] == true) {
    outline('Ciliary Muscles', 'ENABLE');
  }
  if (selected[16] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Suspensory Ligaments')) {
      changeVis('Suspensory Ligaments', true);
    }
    outline('Suspensory Ligaments', 'ENABLE');
    hidden[16] = false;
    selected[16] = true;
  } else {
    selected[16] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#iris > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[17] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      if (!isObjectVisible('Iris')) {
        changeVis('Iris', true);
      }
      outline('Iris', 'ENABLE');
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      if (!isObjectVisible('Iris.001')) {
        changeVis('Iris.001', true);
      }
      outline('Iris.001', 'ENABLE');
    }
    hidden[17] = false;
    selected[17] = true;
  } else {
    selected[17] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#lens> p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[18] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Lens')) {
      changeVis('Lens', true);
    }
    outline('Lens', 'ENABLE');
    hidden[18] = false;
    selected[18] = true;
  } else {
    selected[18] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#pupil > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[19] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      if (!isObjectVisible('Pupil')) {
        changeVis('Pupil', true);
      }
      outline('Pupil', 'ENABLE');
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      if (!isObjectVisible('Pupil.001')) {
        changeVis('Pupil.001', true);
      }
      outline('Pupil.001', 'ENABLE');
    }
    hidden[19] = false;
    selected[19] = true;
  } else {
    selected[19] = false;
  }
});
/* Nervous Tunic */
eventHTMLElem('click', ['QUERYSELECTOR', '#retina > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[20] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Retina')) {
      changeVis('Retina', true);
    }
    outline('Retina', 'ENABLE');
    hidden[20] = false;
    selected[20] = true;
  } else {
    selected[20] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#ora-serrata > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[21] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Ora Serrata')) {
      changeVis('Ora Serrata', true);
    }
    outline('Ora Serrata', 'ENABLE');
    hidden[21] = false;
    selected[21] = true;
  } else {
    selected[21] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#macula-lutea > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[22] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Macula Lutea')) {
      changeVis('Macula Lutea', true);
    }
    outline('Macula Lutea', 'ENABLE');
    hidden[22] = false;
    selected[22] = true;
  } else {
    selected[22] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#central-fovea > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[23] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Central Fovea')) {
      changeVis('Central Fovea', true);
    }
    outline('Central Fovea', 'ENABLE');
    hidden[23] = false;
    selected[23] = true;
  } else {
    selected[23] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#optic-disk > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[24] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis(['GROUP', 'Whole'], false);
      changeVis(['GROUP', 'Crossection'], true);
      changeVis('Cube', false);
    }
    if (!isObjectVisible('Optic Disk')) {
      changeVis('Optic Disk', true);
    }
    outline('Optic Disk', 'ENABLE');
    hidden[24] = false;
    selected[24] = true;
  } else {
    selected[24] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#optic-nerve > p'], true, function(event) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  if (selected[25] == false) {
    selected = listsRepeat(false, 26);
    if (isObjectVisible(['GROUP', 'Whole'])) {
      if (!isObjectVisible('Optic Nerve')) {
        changeVis('Optic Nerve', true);
        changeVis('Central Retinal Vein', true);
        changeVis('Central Retinal Artery', true);
      }
      outline('Optic Nerve', 'ENABLE');
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      if (!isObjectVisible('Optic Nerve.001')) {
        changeVis('Optic Nerve.001', true);
        changeVis('Central Retinal Vein.001', true);
        changeVis('Central Retinal Artery.001', true);
      }
      outline('Optic Nerve.001', 'ENABLE');
    }
    hidden[25] = false;
    selected[25] = true;
  } else {
    selected[25] = false;
  }
});

/* HIDE/SHOW */
/* Extrinsic Eye Muscles */
eventHTMLElem('click', ['QUERYSELECTOR', '#superior-rectus > img'], true, function(event) {
  if (hidden[0] == false) {
    outline('Superior Rectus', 'DISABLE');
    changeVis('Superior Rectus', false);
    selected[0] = false;
    hidden[0] = true;
  } else {
    changeVis('Superior Rectus', true);
    hidden[0] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#inferior-rectus > img'], true, function(event) {
  if (hidden[1] == false) {
    outline('Inferior Rectus', 'DISABLE');
    changeVis('Inferior Rectus', false);
    selected[1] = false;
    hidden[1] = true;
  } else {
    changeVis('Inferior Rectus', true);
    hidden[1] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#medial-rectus > img'], true, function(event) {
  if (hidden[2] == false) {
    outline('Medial Rectus', 'DISABLE');
    changeVis('Medial Rectus', false);
    selected[2] = false;
    hidden[2] = true;
  } else {
    changeVis('Medial Rectus', true);
    hidden[2] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#lateral-rectus > img'], true, function(event) {
  if (hidden[3] == false) {
    outline('Lateral Rectus', 'DISABLE');
    changeVis('Lateral Rectus', false);
    selected[3] = false;
    hidden[3] = true;
  } else {
    changeVis('Lateral Rectus', true);
    hidden[3] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#superior-oblique > img'], true, function(event) {
  if (hidden[4] == false) {
    outline('Superior Oblique', 'DISABLE');
    changeVis('Superior Oblique', false);
    changeVis('Trochlea', false);
    selected[4] = false;
    hidden[4] = true;
  } else {
    changeVis('Superior Oblique', true);
    changeVis('Trochlea', true);
    hidden[4] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#inferior-oblique > img'], true, function(event) {
  if (hidden[5] == false) {
    outline('Inferior Oblique', 'DISABLE');
    changeVis('Inferior Oblique', false);
    selected[5] = false;
    hidden[5] = true;
  } else {
    changeVis('Inferior Oblique', true);
    hidden[5] = false;
  }
});
/* Eye Chambers */
eventHTMLElem('click', ['QUERYSELECTOR', '#anterior-chamber > img'], true, function(event) {
  if (hidden[6] == false) {
    outline('Anterior Chamber', 'DISABLE');
    changeVis('Anterior Chamber', false);
    selected[6] = false;
    hidden[6] = true;
  } else {
    changeVis('Anterior Chamber', true);
    hidden[6] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#posterior-chamber > img'], true, function(event) {
  if (hidden[7] == false) {
    outline('Posterior Chamber', 'DISABLE');
    changeVis('Posterior Chamber', false);
    selected[7] = false;
    hidden[7] = true;
  } else {
    changeVis('Posterior Chamber', true);
    hidden[7] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#aqueous-humor > img'], true, function(event) {
  if (hidden[8] == false) {
    outline('Aqueous Humor', 'DISABLE');
    changeVis('Aqueous Humor', false);
    selected[8] = false;
    hidden[8] = true;
  } else {
    changeVis('Aqueous Humor', true);
    hidden[8] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#vitreous-chamber > img'], true, function(event) {
  if (hidden[9] == false) {
    outline('Vitreous Chamber', 'DISABLE');
    changeVis('Vitreous Chamber', false);
    selected[9] = false;
    hidden[9] = true;
  } else {
    changeVis('Vitreous Chamber', true);
    hidden[9] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#vitreous-humor > img'], true, function(event) {
  if (hidden[10] == false) {
    outline('Vitreous Humor', 'DISABLE');
    changeVis('Vitreous Humor', false);
    selected[10] = false;
    hidden[10] = true;
  } else {
    changeVis('Vitreous Humor', true);
    hidden[10] = false;
  }
});
/* Fibrous Tunic */
eventHTMLElem('click', ['QUERYSELECTOR', '#sclera > img'], true, function(event) {
  if (hidden[11] == false) {
    outline('Sclera', 'DISABLE');
    outline('Sclera.001', 'DISABLE');
    changeVis('Sclera', false);
    changeVis('Sclera.001', false);
    selected[11] = false;
    hidden[11] = true;
  } else {
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis('Sclera', true);
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis('Sclera.001', true);
    }
    hidden[11] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#cornea > img'], true, function(event) {
  if (hidden[12] == false) {
    outline('Cornea', 'DISABLE');
    outline('Cornea.001', 'DISABLE');
    changeVis('Cornea', false);
    changeVis('Cornea.001', false);
    selected[12] = false;
    hidden[12] = true;
  } else {
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis('Cornea', true);
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis('Cornea.001', true);
    }
    hidden[12] = false;
  }
});
/* Vascular Tunic */
eventHTMLElem('click', ['QUERYSELECTOR', '#choroid > img'], true, function(event) {
  if (hidden[13] == false) {
    outline('Choroid', 'DISABLE');
    changeVis('Choroid', false);
    selected[13] = false;
    hidden[13] = true;
  } else {
    changeVis('Choroid', true);
    hidden[13] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#ciliary-body > img'], true, function(event) {
  if (hidden[14] == false) {
    outline('Ciliary Body', 'DISABLE');
    outline('Ciliary Muscles', 'DISABLE');
    outline('Suspensory Ligaments', 'DISABLE');
    changeVis('Ciliary Body', false);
    changeVis('Ciliary Muscles', false);
    changeVis('Suspensory Ligaments', false);
    selected[14] = false;
    hidden[14] = true;
  } else {
    changeVis('Ciliary Body', true);
    changeVis('Ciliary Muscles', true);
    changeVis('Suspensory Ligaments', true);
    hidden[14] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#ciliary-muscles > img'], true, function(event) {
  if (hidden[15] == false) {
    outline('Ciliary Muscles', 'DISABLE');
    changeVis('Ciliary Muscles', false);
    selected[15] = false;
    hidden[15] = true;
  } else {
    changeVis('Ciliary Muscles', true);
    hidden[15] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#suspensory-ligaments > img'], true, function(event) {
  if (hidden[16] == false) {
    outline('Suspensory Ligaments', 'DISABLE');
    changeVis('Suspensory Ligaments', false);
    selected[16] = false;
    hidden[16] = true;
  } else {
    changeVis('Suspensory Ligaments', true);
    hidden[16] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#iris > img'], true, function(event) {
  if (hidden[17] == false) {
    outline('Iris', 'DISABLE');
    outline('Iris.001', 'DISABLE');
    changeVis('Iris', false);
    changeVis('Iris.001', false);
    selected[17] = false;
    hidden[17] = true;
  } else {
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis('Iris', true);
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis('Iris.001', true);
    }
    hidden[17] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#lens > img'], true, function(event) {
  if (hidden[18] == false) {
    outline('Lens', 'DISABLE');
    changeVis('Lens', false);
    selected[18] = false;
    hidden[18] = true;
  } else {
    changeVis('Lens', true);
    hidden[18] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#pupil > img'], true, function(event) {
  if (hidden[19] == false) {
    outline('Pupil', 'DISABLE');
    outline('Pupil.001', 'DISABLE');
    changeVis('Pupil', false);
    changeVis('Pupil.001', false);
    selected[19] = false;
    hidden[19] = true;
  } else {
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis('Pupil', true);
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis('Pupil.001', true);
    }
    hidden[19] = false;
  }
});
/* Nervous Tunic */
eventHTMLElem('click', ['QUERYSELECTOR', '#retina > img'], true, function(event) {
  if (hidden[20] == false) {
    outline('Retina', 'DISABLE');
    changeVis('Retina', false);
    selected[20] = false;
    hidden[20] = true;
  } else {
    changeVis('Retina', true);
    hidden[20] = false;
  }
});
/* MISSING v */
eventHTMLElem('click', ['QUERYSELECTOR', '#ora-serrata > img'], true, function(event) {
  if (hidden[21] == false) {
    outline('Ora Serrata', 'DISABLE');
    changeVis('Ora Serrata', false);
    selected[21] = false;
    hidden[21] = true;
  } else {
    changeVis('Ora Serrata', true);
    hidden[21] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#macula-lutea > img'], true, function(event) {
  if (hidden[22] == false) {
    outline('Macula Lutea', 'DISABLE');
    changeVis('Macula Lutea', false);
    selected[22] = false;
    hidden[22] = true;
  } else {
    changeVis('Macula Lutea', true);
    hidden[22] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#central-fovea > img'], true, function(event) {
  if (hidden[23] == false) {
    outline('Central Fovea', 'DISABLE');
    changeVis('Central Fovea', false);
    selected[23] = false;
    hidden[23] = true;
  } else {
    changeVis('Central Fovea', true);
    hidden[23] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#optic-disk > img'], true, function(event) {
  if (hidden[24] == false) {
    outline('Optic Disk', 'DISABLE');
    changeVis('Optic Disk', false);
    selected[24] = false;
    hidden[24] = true;
  } else {
    changeVis('Optic Disk', true);
    hidden[24] = false;
  }
});
eventHTMLElem('click', ['QUERYSELECTOR', '#optic-nerve > img'], true, function(event) {
  if (hidden[25] == false) {
    outline('Optic Nerve', 'DISABLE');
    outline('Optic Nerve.001', 'DISABLE');
    changeVis('Optic Nerve', false);
    changeVis('Central Retinal Vein', false);
    changeVis('Central Retinal Artery', false);
    changeVis('Optic Nerve.001', false);
    changeVis('Central Retinal Vein.001', false);
    changeVis('Central Retinal Artery.001', false);
    selected[25] = false;
    hidden[25] = true;
  } else {
    if (isObjectVisible(['GROUP', 'Whole'])) {
      changeVis('Optic Nerve', true);
      changeVis('Central Retinal Vein', true);
      changeVis('Central Retinal Artery', true);
    } else if (isObjectVisible(['GROUP', 'Crossection'])) {
      changeVis('Optic Nerve.001', true);
      changeVis('Central Retinal Vein.001', true);
      changeVis('Central Retinal Artery.001', true);
    }
    hidden[25] = false;
  }
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.disposeMaterialsCache = function() {
    if (_pGlob) {
        for (const mat of _pGlob.materialsCache.values()) {
            mat.dispose();
        }
        _pGlob.materialsCache.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
